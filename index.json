{
  "audioband/audiosources/index.html": {
    "href": "audioband/audiosources/index.html",
    "title": "Audio Sources",
    "keywords": "Audio Sources Audio sources allow AudioBand to access data from different music players. To select an audio source, right click AudioBand and go to the AudioSources submenu. Check below for links on the specific audio source and setup instructions. Available audio sources Spotify iTunes MusicBee Audio source development See here to find out how to develop and add a custom audio source"
  },
  "audioband/audiosources/itunes.html": {
    "href": "audioband/audiosources/itunes.html",
    "title": "iTunes",
    "keywords": "iTunes No specific setup required for iTunes Note iTunes will open when the audio source is selected, and cannot be changed (as far as I know)."
  },
  "audioband/audiosources/musicbee.html": {
    "href": "audioband/audiosources/musicbee.html",
    "title": "MusicBee",
    "keywords": "MusicBee Setup Make sure that the Musicbee IPC plugin is installed for MusicBee. Use this link if that link doesn't work."
  },
  "audioband/audiosources/spotify.html": {
    "href": "audioband/audiosources/spotify.html",
    "title": "Spotify",
    "keywords": "Spotify Setup Login to the Spotify Dashboard and create a new App. Fill in the details, you can name it whatever you want. This app will be just for AudioBand. Go to the app you created and click Edit Settings . Add http://localhost/ as a callback url. You can use a different port for the local webserver (see next step) Right click anywhere in the toolbar > Audio Band Settings > Audio Source Settings and fill in the fields Spotify Client Id and Spotify Client Secret . You can find them in the same dashboard page for the Spotify app you created. You can also change the Callback Port if needed. Your browser should open asking you to login and allow your spotify app to access your currently playing songs. If your browser does not open automatically, Right click the toolbar and select Audio Sources > Spotify. It should now open in your default browser. Sign-in and accept and it should now display song information (make sure spotify is selected as the audio source). Note Currently you need to have the Spotify desktop application for the playback buttons to work properly. The shuffle, repeat-mode and progress bar buttons will only work if you have Spotify Premium. Dashboard Callback settings"
  },
  "audioband/audiosources/windows10.html": {
    "href": "audioband/audiosources/windows10.html",
    "title": "Windows 10",
    "keywords": "Windows 10 No specific setup required for Windows 10 Note This will only work with apps who also have media hardware keys enabled."
  },
  "audioband/customization/albumartpopup.html": {
    "href": "audioband/customization/albumartpopup.html",
    "title": "Album Art Popup",
    "keywords": "Album Art Popup Visibility Whether the popup will be visible Width Width of the popup Height Height of the popup X Position The x position of the popup. It is relative to the top left corner of the album art. Y Position The y position of the popup. It is relative to the top left corner of the album art."
  },
  "audioband/customization/general.html": {
    "href": "audioband/customization/general.html",
    "title": "General",
    "keywords": "General Width The Width of the toolbar Height The Height of the toolbar"
  },
  "audioband/customization/index.html": {
    "href": "audioband/customization/index.html",
    "title": "Customization",
    "keywords": "Customization Right click audio band and select Audio Band Settings and a new window will appear where you can do your customization. A description of the options can be found on this page and on the naviagtion on the left. In app help coming soon"
  },
  "audioband/customization/textlabels.html": {
    "href": "audioband/customization/textlabels.html",
    "title": "Text Labels",
    "keywords": "Text Labels Name Name of the label. Used for indentification purposes Visibility Whether to show the label or not Width Width of the label. If the text exceeds the width, the text will scroll Height Height of the text X Position The x position of the text Y Position The Y Position of the text Font family The font family for the text Font size The font size of the text Font color The default color of the text Alignment The alignment of the label Scroll speed The scroll speed of the label when the text scrolls Text Format The text format for a label determines what text is shown It can be any combination of text or placeholders. For example the format This is some text will make the label display This is some text or Song name: {song} will display Song name: followed by whatever the current song's name is. The format for a placeholder is { style tag : color } where tag and color are any of the following values: Tag ( case sensitive! ) artist : Artist for the current song song : The title of the current song album : Album name for the current song time : Current playback time for the current song length : Total length of the current song remaining : Remaining time of the current song Color Use an html color code in the format #RRGGBB Text Style * (asterisk): Bolds the placeholder & (ampersand): Italicizes the placeholder _ (underline) - Underlines the placeholder Example formats Normal label showing the song and artist : {song} by {artist} Showing the album name in bold : {*album} Showing the song progress in gray : {time:#A9A9A9} : {length:#A9A9A9} Using style and color : {*artist:#a9a9a9}"
  },
  "audioband/development/project-layout.html": {
    "href": "audioband/development/project-layout.html",
    "title": "Project layout",
    "keywords": "Project layout Last commit at this time of writing / update: f13b2f226991e46704684e060873e03b26441f0e Here are the main projects in the solution: AudioBand : The is the \"main\" project where audioband lives AudioBand.Logging : This project contains shared logging facilities AudioBand.AudioSource : This project contains the audiosource interface AudioSourceHost : This project contains the assembly used to host an audio source in a separate app domain * AudioSource : These are the projects for the included audio sources. AudioBand project Entry point The entry point for audioband can be found in the Deskband.cs file. This is the composition root of the application. It's the equivalent of the main function in a normal winforms or wpf application but instead of calling Application.Run() , the root user control is instantiated directly. There is no main window . The toolbar is implemented as a WPF usercontrol in UI/Toolbar/AudioBandToolbar.xaml AudioBandToolbar.xaml This is the top level user control, equivalent to the main window in wpf or main form in winforms. Codebehind The codebehind listens to size changes and notifies windows to update the deskband size. ViewModel The viewmodel for the toolbar can be found in ViewModels/AudioBandToolbarViewModel . It handles the context menu, loading the audio sources, and updating other view models when the audio source changes. When the toolbar is loaded, the LoadCommand is invoked, starting the step in initialization: loading the audio sources. Audio source loading Audio source loading is done by the AudioSource/AudioSourceManager class. Each audio source is loaded in their own app domain using the AudioSourceHost project. The creation and communication with the app domain is done through the AudioSource/AudioSourceProxy class. Currently, all audio sources are loaded at the start by the toolbar viewmodel, and there is no file system monitoring for new sources. For each audio source, these steps are performed: Add to the observable collection for the context menu Merge settings. If there are already saved settings for the audio source, then the settings are applied to the audio source If there are no previously saved settings, then the default setting values are extracted and saved Viewmodels for these settings are built and added so they can be manipulated in the settings window ui If the audio source is selected in the settings, then it is activated. App settings loading App settings are loaded and exposed by the Settings/AppSettings class. Persistence is done through Settings/Persistence/PersistSettings . The serialization format for settings uses the toml format. Toml is used because when the project was created, configuration was simple and editing the file in a text editor was the way to change settings. Toml was a good use case for that. Now, the settings have more nesting and more lists, which is less readable with toml however there is now a settings UI so editing the file isn't required. So migration to another serialization format isn't something required for now. Settings migrations As the settings evolve, the serialization format can change so there are settings migrations located in the Migrations subfolder. These classes update old configuration files to the latest format. If an older version of the settings is detected, then a lookup is done in SettingsMigration.cs to find the appropriate way to transform the settings file. Mapping is done with AutoMapper . Views and ViewModels Views and viewmodels are stored together in the UI subfolder. No MVVM frameworks are used, instead there is a ViewModelBase implementation and standard ICommand implementations. ViewModelBase provides automatic implementations for INotifyPropertyChanged : Has a SetProperty method that automatically calls INotifyPropertyChanged.PropertyChanged event if a field value changes. The attribute AlsoNotify can also be applied to raise PropertyChanged for other properties. Example: [AlsoNotify(nameof(Size))] public int Width { get => _width; set => SetProperty(ref _width, value); } public Size Size => new Size(Width, Height); INotifyDataError : Provides a few RaiseValidationError methods that raise the INotifyDataError.ErrorsChanged event. IResettable : Custom interface that exposes a method to reset the viewmodel to default values. The base class implements a command to call reset and the method ResetObject<T> to reset an object to its default value. BeginEdit , EndEdit and CancelEdit commands and methods. The attribute TrackState can is used to automatically call those methods. // Automatically calls beginedit method if the value is changed [TrackState] public int Width { get => Model.Width; // Using the model as the source for the value set => SetProperty(Model, nameof(Model.Width), value); // Set the value in the model } Message bus Under the Messages folder there is a simple IMessageBus interface. Messages are used sparingly for communicating between the settings window <-> toolbar and between view models. Other Dpi Since we are in an interop scenario, there are some issues with automatic dpi handling so it is done manually through the DpiScaling behavior located in the UI/behaviors folder. AudioSourceHost project The AudioSourceHost project is a library to load an audio source and exposes it via MarshalByRef objects for cross app domain communication. It uses the Microsoft Extensibility Framework to locate and load an IAudioSource ."
  },
  "audioband/development/setup.html": {
    "href": "audioband/development/setup.html",
    "title": "Setup",
    "keywords": "Setup Install Visual Studio 2019 . Make sure to install support for .Net Framework 4.7 development. Clone the repo git clone git@github.com:AudioBand/audio-band.git Open the solution file under src/AudioBand.sln in visual studio. Restore nuget packages before building The toolbar will have to be installed after being built (see Running local version section). Note Explorer does not unload audioband so you will not be able to build if explorer has loaded it. The debug configuration will automatically attempt close explorer to build the audioband project and restart it after the build. Running local version To test the local version of audioband, it needs to be installed as a toolbar. The easiest way is to copy the install script from tools/install.cmd to the build output folder and run it as admin . Warning Installing the development version will overwrite any other installations. Debugging There are 2 ways you can use a debugger on audioband. Attach the debugger: In visual studio, open the attach to process menu (ctrl + alt + p). Select explorer.exe and click attach. Inserting the statement System.Diagnostics.Debugger.Launch(); will allow you to attach a debugger at any place in the code. This is useful if you need the debugger at the start. Running unit tests You may notice that there is a configuration called Test . This is so that it is easier to run tests without having to restart explorer to build the project. Since the dlls will be in use by explorer, switching to the test configuration allows the project to be built. Otherwise, it should be identical to the debug configuration. Tests are located under the tests folder in the solution."
  },
  "audioband/development/wixproj.html": {
    "href": "audioband/development/wixproj.html",
    "title": "Compiling into an .msi",
    "keywords": "Compiling into an .msi I'm writing this down for anyone who wants to make an .msi on their own, and for future me. You don't have to do this step if you want to test/run your local build. You only need this if you want to distribute your version. Requirements Wixtools Visual Studio Wixtools Visual Studio Extension Once Wixtools is installed it is recommended to add their root folder to your path . Compiling the .wixproj Once you have installed the Extension, you are now able to load in any .wixproj. If you did not add any AudioSources, it is pretty easy to compile. Set your environment to Release , and go to Build -> Build Solution . Once that is finished, you can Build the AudioBandInstaller project. You will find your .msi in src/AudioBandInstaller/bin/Release/ . However, if you add a new AudioSource, you have to do some extra setup to make sure the .msi accounts for your new AudioSource. The steps aren't too hard though, just make sure you don't miss any: Run powershell.exe -File tools/patchinstaller.ps1 MAJOR_VERSION MINOR_VERSION PATCH_VERSION from the root of the folder Add YourAudioSourcePath as a constant to the <DefineConstants> tag inside of .wixproj Add a <HeatDirectory> tag inside of .wixproj for your AudioSource Add a project reference to your AudioSource Add a <Feature> tag inside of Product.wxs for your AudioSource The XXXHeatGenerated.wxs files you see should be automatically generated, if not, also run while inside your AudioSource folder: heat project XXXAudioSource.csproj -ag -pog Binaries -template fragment -out ../AudioBandInstaller/XXXHeatGenerated.wxs From what I understand, Heating Files is just a way to tell the project where to get all the correct files from."
  },
  "audioband/faq.html": {
    "href": "audioband/faq.html",
    "title": "FAQ",
    "keywords": "FAQ Q. Why is there a margin on the right of the toolbar? This occurs if you've moved the toolbar, then lock the task bar. Restarting explorer should get rid of the margin"
  },
  "audioband/index.html": {
    "href": "audioband/index.html",
    "title": "Audioband Documentation",
    "keywords": "Audioband Documentation Here you will find links to get you started with AudioBand. See below for installation. See the links on the side for more information. Quick Start Requirements .Net framework 4.7 Windows 10 Installation Find the latest download in the Releases page and download the installer (.msi) file. Usage Right click on the taskbar and select Audio Band from the toolbars submenu. ( See images below ) Right click on the Audio Band toolbar and select an audio source (ex. Spotify) Do any audio source specific setup . Spotify, for example requires some additional setup. Check out other helpful links in the side Important Previous versions of windows are not supported. Audioband may still work but there is no testing on older versions. Note High DPI is supported on Windows 10 1703 and above. Info Logs can be found in the temp folder: %temp%\\AudioBand.log Settings are saved in the app data directory: %appdata%\\AudioBand Links Audio source development"
  },
  "audiosource-api/index.html": {
    "href": "audiosource-api/index.html",
    "title": "AudioSource api reference",
    "keywords": "AudioSource api reference"
  },
  "audiosource-docs/index.html": {
    "href": "audiosource-docs/index.html",
    "title": "AudioSource development",
    "keywords": "AudioSource development This page contains the AudioBand.AudioSource api documentation and documentation on developing an audio source for AudioBand. Building a new audio source project Create a new class library project Install the audio source nuget package Create a class to implement IAudioSource . Api reference on the right. public class AudioSource : IAudioSource { // implementation here } The file AudioSource.manifest should be add to the project after installing the nuget package. Edit the file so that the name will matches your asembly file name. AudioSource = \"AudioSource.dll\" Deploying your new audio source. For now, AudioBand reads each sub folder under the AudioSources folder. To deploy your new audio source, place your files under a new subfolder in the AudioSources directory. Ensure that your AudioSource.manifest file is also included. You also do not need to copy the AudioBand.AudioSource library files The file structure will look like this: Audioband/ |--AudioSources/ |--NewAudioSource/ |--Audiosource.dll |--AudioSource.manifest |--other files"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the AudioBand documentation homepage.",
    "keywords": "Welcome to the AudioBand documentation homepage. Refer to the links below to get started. Links AudioBand help and documentation Documentation for implmenting an audiosource"
  }
}